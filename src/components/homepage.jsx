/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/UzrxpgVEsxU
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'
import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Input } from "@/components/ui/input"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Toaster } from "@/components/ui/toaster"
import { useToast } from "@/components/ui/use-toast"

import { useEffect, useState } from "react"

function getLastPartOfUrl(url){
  // remove params and hash and trailing slash
  url = url.replace(/(\?.*)|(#.*)|\/$/, "")
  const parts = url.split("/")
  // convert to filename safe string
  const last = parts[parts.length - 1].replace(/[^a-z0-9]/gi, '_').toLowerCase()
  return last
}


export function Homepage() {
  const { toast } = useToast()
  const [url, setUrl] = useState("");
  const [imagesDir, setImagesDir] = useState("images");
  const [downloadImages, setDownloadImages] = useState(false);
  const [imagesBasePathOverride, SetImagesBasePathOverride] = useState(undefined);
  const [isLoading, setIsLoading] = useState(false);
  const [md, setMd] = useState("");

  function saveSettingsToLocalStorage(){
    const settings = {
      url,
      imagesDir,
      downloadImages,
      imagesBasePathOverride
    }
    localStorage.setItem("settings", JSON.stringify(settings))
  }

  useEffect(()=>{
    const settings = localStorage.getItem("settings");
    if (settings){
      const parsed = JSON.parse(settings);
      setUrl(parsed.url)
      setImagesDir(parsed.imagesDir)
      setDownloadImages(!!parsed.downloadImages)
      SetImagesBasePathOverride(parsed.imagesBasePathOverride)
    }
  }, [])

  async function submit(){
    if (isLoading){
      return;
    }
    if (!url){
      return toast({
        title: "Invalid URL",
        description: "Please enter a valid URL",
      })
    }
    const fullUrl = `/api/tomd?url=${url}&downloadImages=${downloadImages}&imagesDir=${imagesDir}&imagesBasePathOverride=${imagesBasePathOverride}`;
    setIsLoading(true)
    const resp = await fetch(fullUrl)
    if (!resp.ok){
      toast({
        title: "Failed to Convert",
        description: "Either the URL is invalid or the server is too busy. Please try again later.",
      })
    }
    if (resp.ok && !downloadImages){
      const md = await resp.text();
      toast({
        title: "Converted Successfully",
        description: "Your markdown is being downloaded as a text file.",
      })
      const a = document.createElement('a');
      a.href = `data:text/plain;charset=utf-8,${encodeURIComponent(md)}`;
      a.download = `${getLastPartOfUrl(url)}.md` || "markdd.md";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);

    } 
    else if (resp.ok && downloadImages){
      const blob = await resp.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${getLastPartOfUrl(url)}.zip` || "markdd.zip";
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      toast({
        title: "Download Started",
        description: "Your markdown and images are being downloaded as a zip file",
      })
    }
    saveSettingsToLocalStorage()
    setIsLoading(false)
  }
  return (
    (<main className="w-full h-[100vh] py-6 space-y-6 flex justify-center items-center">
      <Toaster />
      <div className="container flex flex-col items-center justify-center">
        <div className="space-y-2 text-center mb-10">
          <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl">üì•<br/>Markdown<b>Down</b></h1>
          <p
            className="max-w-[600px] text-gray-500 md:text-xl/relaxed dark:text-gray-400">
            Convert any webpage to a clean markdown<br/> w/ images downloaded.
          </p>
        </div>
        <div className="w-full max-w-sm space-y-2">
          <div className="flex w-full max-w-sm items-center space-x-2 mb-10">
            <Input value={url} type="text" placeholder="URL" onChange={val=>setUrl(val.target.value)} onKeyDown={(e)=>{
              if (e.key === "Enter"){
                submit()
              }
            }} />
            <Button disabled={isLoading} type="submit" onClick={submit}>
              {isLoading ? "Converting..." : "Convert"}
            </Button>
          </div>
          
          <div className="space-y-2 flex flex-col gap-4">
            <p>Advanced Options</p>
            <div className="flex items-center space-x-2">
              <Checkbox id="remove-images" checked={downloadImages} onClick={t=>setDownloadImages(!downloadImages)} />
              <label className="text-sm leading-none" htmlFor="remove-images">
                Download images locally and link them
              </label>
            </div>
            <div className="space-y-2">
              <Label className="text-sm leading-none" htmlFor="images-folder">
                Override Images Folder Name
              </Label>
              <Input id="images-folder" placeholder="Enter folder name" type="text" value={imagesDir} onChange={val=>{
                setImagesDir(val.target.value)
              }} />
              <div className="space-y-2">
              <Label className="text-sm leading-none" htmlFor="images-folder">
                Override base path for images in markdown
              </Label>
              <Input id="images-basepath" placeholder={`./${imagesDir}`} type="text" value={imagesBasePathOverride} onChange={val=>{
                SetImagesBasePathOverride(val.target.value)
              }} />
              </div>
            </div>
          </div>
          
        </div>
        <footer className="mt-3 text-xs text-gray-500 dark:text-gray-400">
          <p>
            Made with ‚ù§Ô∏è by{" "}
            <a href="https://asadmemon.com" target="_blank" rel="noopener noreferrer">
              Asad
            </a>
          </p>
        </footer>
      </div>
      
    </main>)
  );
}
